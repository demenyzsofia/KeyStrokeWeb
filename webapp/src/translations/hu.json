{
    "pages": { 
        "home": {
            "title": "Webalkalmazás célja" ,
            "introduction": "Az alkalmazás a jelszó gépelési ritmusok megismerésébe nyújt betekintést.",
            "content": "Öt adathalmaz áll rendelkezésünkre, melyek különböző számú felhasználó adatait tartalmazzák. Ezekről az adathalmazokról bővebben olvashatszt az Adathalmazok menüpont alatt. A felhasználó tehát öt adathalmazból választhatja ki, hogy a továbbiakban melyikkel szeretne dolgozni, melyiket szeretné megtekinteni. Két fő funkcionalitást tudunk elkülöníteni, melyek különböző alfunkcionalitások megtekintését, kipróbálását teszik lehetővé. Ez a két fő egység:", 
            "listing": {
                "1": "Adatelemzési funkcionalitás",
                "2": "Teljesítményelemzés"
            },
            "data": "Az adatelemzési funkcionalitás lehetőséget ad a kiválasztott adathalmaz megtekintésére, vizualizációjára. Ha nem választódik ki előre az adathalmaz, akkor alapértelmezetten a Sapipin adatgyűjtemény kerül megjelenítésre. A felhasználó különböző diagramokat tekinthet meg az adott halmazról (vonaldiagramok, hisztogramok, claszterek). Ezek a diagramok tükrözik az összes felhasználó teljesítményét; akadnak olyanok, amelyek felhasználóra szabottak és csupán egy felhasználó teljesítményről adnak információt.",
            "performance": "A teljesítményelemzés opciónál a felhasználó kiválaszthatja a neki tetsző detektortkategóriát, majd a kategóriából lehetősége adódik egy konkrét detektor kiválasztására. A továbbiakban megnézheti annak teljesítményét ROC görbék által, valamint az AUC és EER értékekből."
        },
        "datasets":{
            "title": "Adathalmazok ismertetése" 
        },
        "basic-concepts":{
            "title": "Alapfoglamak, jelölések",
            "subtitle1" : "Alapfoglamak",
            "listing1" : {
                "1": "Anomália detektálás: egy olyan eljárás, amely különböző algoritmusokat használva képes meghatározni egy adott adatról, hogy mennyire tér el az előzőleg begyűjtött adatokból előállított modelltől",
                "2": "Osztályozás: előre definiált osztályokba soroljuk a különböző mintákat",
                "3": "Igaz pozitív (TP: true positive): modell által helyesen prediktált pozitív esetek száma.",
                "4": "Hamis negatív (FN: false negative): azon pozitív esetek száma, amelyeket a modell tévesen negatívként prediktál.",
                "5": "Hamis pozitív (FP: false positive): azon negatív esetek száma, amelyeket a modell tévesen pozitívként prediktál.",
                "6": "Igaz negatív (TN: true negative): amely az osztályozási modell által helyesen prediktált negatív esetek száma",
                "7": "Pontosság = TP/(TP+FP): megmutatja, hogy a pozitívként felismertek hányad része volt valóban pozitív" 
            },
            "listing2":{
                "1": "CSV - Comma-Separated Values: vesszővel elválasztott érték",
                "2": "AUC - Area Under the ROC Curve: ROC görbe alatti terület;  kifejezi, hogy mennyire soroljuk a pozitív mintákat a negtívak elé a tesztelés folyamán.",
                "3": "EER - Equal Error Rate: egyenlő hibaarány",
                "4": "H - Hold: nyomvatartás",
                "5": "UD - Up-Down: fel-le",
                "6": "TPR: Igaz pozitívak aránya = TP/(összes pozitívok száma)",
                "7": "FPR: Hamis pozitívak aránya: FP/(összes negatívok száma)",
                "8": "FNR: Hamis negatívak aránya: FN/(összes pozitívok száma)",
                "9": "TNR: Igaz negatívak aránya: TN/(összes negatívok száma)"
            }
        },
        "python-basics": {
            "title": "Anomália detektálás Pythonban",
            "introduction": "Pythonban nagyon könnyen lehet anomália detektáló algoritmust írni, számos beépített könyvtárcsomag van a segítségünkre.",
            "content": "Az első és legfontosabb a PyOD csomag, mely egy átfogó és skálázható Python-eszközkészlet a kiugró értékek felderítésére, végeztem el a detektálásokat. Ez a csomag több mint harminc észlelési algoritmust tartalmaz, mely öt csoportba sorolható, a különféle technikáknak meglelelően:",
            "listing": {
                "1": "Lineáris modellek",
                "2": "Közelség alapú modellek",
                "3": "Együttes módszereken alapuló modellek",
                "4": "Információelméleti modellek",
                "5": "Valószínűségi modellek"
            },
            "sclearn": "Emelett még az scikit-learn könyvtárcsomag is fontos szerepet játszik.",
            "subtitle": "Példaként nézzük a k−NN osztályozót",
            "knn-intro": "A k−NN(k Nearest Neighbor) osztályozó a Közelség alapú modellek csoportjába tartozik. Esetében adottak a minták és a hozzájuk tartozó címkék. Ha egy még ismeretlen mintát szeretenénk a k−NN-el osztályozni, meg kell néznünk az ismeretlen mintához tartozó k darab legközelebbi ismert minta címkéjét, majd azok alapján dönteni az ismeretlen címkéjéről",
            "code":{
                "row1": "#from models import kNN detector",
                "row2": "from pyod.models.knn import KNN",
                "row3": "#generate sample data with pyod.utils.data.generate_data()",
                "row4": "#percentage of outliers",
                "row5": "contamination = 0.1",
                "row6": "#number of training points",
                "row7": "n_train = 200",
                "row8": "#number of testing points",
                "row9": "n_test = 100",
                "row10": "X_train, y_train, X_test, y_test = generate_data(n_train=n_train, n_test=n_test, contamination=contamination)",
                "row11": "#initialize a pyod.models.knn.KNN detector, fit the model, and make the prediction.",
                "row12": "#train kNN detector",
                "row13": "clf_name = 'KNN'",
                "row14": "clf = KNN()",
                "row15": "clf.fit(X_train)",
                "row16": "#get the prediction labels and outlier scores of the training data",
                "row17": "#binary labels (0: inliers, 1: outliers)",
                "row18": "y_train_pred = clf.labels_",
                "row19": "#raw outlier scores",
                "row20": "y_train_scores = clf.decision_scores_",
                "row21": "#get the prediction on the test data",
                "row22": "#outlier labels (0 or 1)",
                "row23": "y_test_pred = clf.predict(X_test)",
                "row24": "# outlier scores",
                "row25": "y_test_scores = clf.decision_function(X_test)",
                "row26": "#it is possible to get the prediction confidence as well",
                "row27": "#outlier labels (0 or 1) and confidence in the range of [0,1]",
                "row28": "y_test_pred, y_test_pred_confidence = clf.predict(X_test, return_confidence=True)"
            }
        }

    },

    "shared": {
        "header":{
            "title": "Anomália detektálás jelszó gépelés esetében"
        },
        "menu": {
            "listing":{
                "1": "Főoldal",
                "2": "Adathalmazok",
                "3": "Alapfogalmak",
                "4": "Python alapok",
                "5": "Adatelemzés",
                "6": "Teljesítményelemzés"
            }
        },
        "sidebar":{
            "title": "Adathalmazok"
        },
        "footer":{
            "title": "© 2022 - Demény Zsófia - Diplomadolgozat"
        }
    }

    
}